/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on Feb 7, 2012, 1:31:34 PM
 */
package org.zet.riptel.gui;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.zet.utils.net.RIPT;

/**
 *
 * @author ZeTMW
 */
public class GUI extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = -4279808836616902537L;

    /**
     * Creates new form GUI
     */
    public GUI() {
        super("Random IP Telnet by ZeT");
        super.setLocationRelativeTo(null);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jD_DBcon = new javax.swing.JDialog();
        jP_DBcon = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_url = new javax.swing.JTextField();
        txt_db = new javax.swing.JTextField();
        txt_usr = new javax.swing.JTextField();
        txt_pass = new javax.swing.JPasswordField();
        jTP_Main = new javax.swing.JTabbedPane();
        jP_Main = new javax.swing.JPanel();
        pan_Main = new java.awt.Panel();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnExpFile = new javax.swing.JButton();
        jChk_DB = new javax.swing.JCheckBox();
        jSP_iptxt = new javax.swing.JScrollPane();
        txtIPs = new javax.swing.JTextArea();
        jSP_sstxt = new javax.swing.JScrollPane();
        txtSys = new javax.swing.JTextArea();
        pan_control = new javax.swing.JPanel();
        jS_TTL = new javax.swing.JSlider();
        rdbA = new javax.swing.JRadioButton();
        rdbB = new javax.swing.JRadioButton();
        rdbC = new javax.swing.JRadioButton();
        rdbFR = new javax.swing.JRadioButton();
        jP_DBEntry = new javax.swing.JPanel();
        jSP_telout = new javax.swing.JScrollPane();
        jTxt_telOut = new javax.swing.JTextArea();
        jSP_nmap = new javax.swing.JScrollPane();
        jTxt_nmap = new javax.swing.JTextArea();
        jP_DBcontrol = new javax.swing.JPanel();
        jB_Nmap = new javax.swing.JButton();
        jB_DBSubmit = new javax.swing.JButton();
        cb_DBIPs = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTF_User = new javax.swing.JTextField();
        jTF_Pass = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_Tel = new javax.swing.JButton();
        chb_liveTel = new javax.swing.JCheckBox();
        lb_infoStatus = new javax.swing.JLabel();
        pass_sudo = new javax.swing.JPasswordField();

        jD_DBcon.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText("URL");

        jLabel2.setText("Schema");

        jLabel3.setText("User Name");

        jLabel4.setText("Password");

        txt_url.setText("localhost");
        txt_url.setPreferredSize(new java.awt.Dimension(100, 30));

        txt_db.setText("RTL_DB");
        txt_db.setPreferredSize(new java.awt.Dimension(100, 30));

        txt_usr.setText("zet");
        txt_usr.setPreferredSize(new java.awt.Dimension(100, 30));

        txt_pass.setPreferredSize(new java.awt.Dimension(100, 30));

        javax.swing.GroupLayout jP_DBconLayout = new javax.swing.GroupLayout(jP_DBcon);
        jP_DBcon.setLayout(jP_DBconLayout);
        jP_DBconLayout.setHorizontalGroup(
            jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBconLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(39, 39, 39)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_usr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jP_DBconLayout.setVerticalGroup(
            jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBconLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_url, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_usr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jP_DBconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jD_DBcon.getContentPane().add(jP_DBcon);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RTL by ZeT");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.lightGray);
        setName("main_Frame"); // NOI18N
        setResizable(false);

        jTP_Main.setPreferredSize(new java.awt.Dimension(560, 350));

        jP_Main.setPreferredSize(new java.awt.Dimension(560, 350));

        btnStart.setText("Start");
        btnStart.setFocusable(false);
        btnStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.setVisible(true);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.setFocusable(false);
        btnExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnExpFile.setText("Exp2File");
        btnExpFile.setEnabled(false);
        btnExpFile.setFocusable(false);
        btnExpFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExpFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExpFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpFileActionPerformed(evt);
            }
        });

        jChk_DB.setText("DB Con");

        javax.swing.GroupLayout pan_MainLayout = new javax.swing.GroupLayout(pan_Main);
        pan_Main.setLayout(pan_MainLayout);
        pan_MainLayout.setHorizontalGroup(
            pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_MainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jChk_DB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_MainLayout.createSequentialGroup()
                        .addComponent(btnExpFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_MainLayout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pan_MainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnExpFile, btnStart, btnStop});

        pan_MainLayout.setVerticalGroup(
            pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_MainLayout.createSequentialGroup()
                .addGroup(pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pan_MainLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jChk_DB))
                    .addGroup(pan_MainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExpFile)
                            .addGroup(pan_MainLayout.createSequentialGroup()
                                .addGroup(pan_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnStop)
                                    .addComponent(btnStart))
                                .addGap(14, 14, 14)
                                .addComponent(btnExit)))))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pan_MainLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnExpFile, btnStart, btnStop});

        jSP_iptxt.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtIPs.setEditable(false);
        txtIPs.setColumns(20);
        txtIPs.setRows(5);
        txtIPs.setAutoscrolls(true);
        txtIPs.setBorder(javax.swing.BorderFactory.createTitledBorder("Telneted IPs"));
        txtIPs.setRequestFocusEnabled(false);
        jSP_iptxt.setViewportView(txtIPs);

        txtSys.setEditable(false);
        txtSys.setColumns(20);
        txtSys.setRows(5);
        txtSys.setBorder(javax.swing.BorderFactory.createTitledBorder("System Status"));
        jSP_sstxt.setViewportView(txtSys);

        jS_TTL.setMajorTickSpacing(1);
        jS_TTL.setMaximum(3);
        jS_TTL.setMinimum(1);
        jS_TTL.setMinorTickSpacing(1);
        jS_TTL.setPaintTicks(true);
        jS_TTL.setValue(1);
        jS_TTL.setBorder(javax.swing.BorderFactory.createTitledBorder("TTL :"));
        jS_TTL.setOpaque(true);

        buttonGroup1.add(rdbA);
        rdbA.setText(" A");
        rdbA.setAlignmentY(0.0F);
        rdbA.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Class Range :"));
        rdbA.setFocusable(false);
        rdbA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rdbA.setPreferredSize(new java.awt.Dimension(20, 47));
        rdbA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        buttonGroup1.add(rdbB);
        rdbB.setText(" B");
        rdbB.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Class Range :"));
        rdbB.setFocusable(false);
        rdbB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rdbB.setPreferredSize(new java.awt.Dimension(20, 47));
        rdbB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        buttonGroup1.add(rdbC);
        rdbC.setText(" C");
        rdbC.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Class Range :"));
        rdbC.setFocusable(false);
        rdbC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rdbC.setPreferredSize(new java.awt.Dimension(20, 47));
        rdbC.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        buttonGroup1.add(rdbFR);
        rdbFR.setText("FR");
        rdbFR.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Class Range :"));
        rdbFR.setFocusable(false);
        rdbFR.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rdbFR.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rdbFR.setSelected(true);

        javax.swing.GroupLayout pan_controlLayout = new javax.swing.GroupLayout(pan_control);
        pan_control.setLayout(pan_controlLayout);
        pan_controlLayout.setHorizontalGroup(
            pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_controlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jS_TTL, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbB, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbFR)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pan_controlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rdbA, rdbB, rdbC, rdbFR});

        pan_controlLayout.setVerticalGroup(
            pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_controlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(rdbFR, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbC, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pan_controlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(rdbB, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rdbA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jS_TTL, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jP_MainLayout = new javax.swing.GroupLayout(jP_Main);
        jP_Main.setLayout(jP_MainLayout);
        jP_MainLayout.setHorizontalGroup(
            jP_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_MainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSP_iptxt, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jP_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pan_Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSP_sstxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pan_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jP_MainLayout.setVerticalGroup(
            jP_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_MainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSP_iptxt)
                    .addGroup(jP_MainLayout.createSequentialGroup()
                        .addComponent(jSP_sstxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pan_control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pan_Main, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTP_Main.addTab("Main", jP_Main);

        jP_DBEntry.setPreferredSize(new java.awt.Dimension(560, 350));

        jTxt_telOut.setColumns(20);
        jTxt_telOut.setRows(5);
        jTxt_telOut.setBorder(javax.swing.BorderFactory.createTitledBorder("Tel Output"));
        jSP_telout.setViewportView(jTxt_telOut);

        jTxt_nmap.setColumns(20);
        jTxt_nmap.setRows(5);
        jTxt_nmap.setBorder(javax.swing.BorderFactory.createTitledBorder("Nmap Output"));
        jSP_nmap.setViewportView(jTxt_nmap);

        jB_Nmap.setText("Nmap");
        jB_Nmap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_NmapActionPerformed(evt);
            }
        });

        jB_DBSubmit.setText("Submit");
        jB_DBSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_DBSubmitActionPerformed(evt);
            }
        });

        cb_DBIPs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_DBIPsActionPerformed(evt);
            }
        });

        jLabel5.setText("UserName");

        jLabel6.setText("Password");

        jLabel7.setText("Found IPs");

        btn_Tel.setText("Telnet");
        btn_Tel.setFocusCycleRoot(true);
        btn_Tel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_DBcontrolLayout = new javax.swing.GroupLayout(jP_DBcontrol);
        jP_DBcontrol.setLayout(jP_DBcontrolLayout);
        jP_DBcontrolLayout.setHorizontalGroup(
            jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBcontrolLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_DBcontrolLayout.createSequentialGroup()
                        .addComponent(jB_Nmap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Tel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jB_DBSubmit))
                    .addGroup(jP_DBcontrolLayout.createSequentialGroup()
                        .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_DBIPs, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_User, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))))
        );

        jP_DBcontrolLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_Tel, jB_DBSubmit, jB_Nmap});

        jP_DBcontrolLayout.setVerticalGroup(
            jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBcontrolLayout.createSequentialGroup()
                .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_DBIPs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_User, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_Pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jP_DBcontrolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jB_Nmap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jB_DBSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_Tel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jP_DBcontrolLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_Tel, jB_DBSubmit, jB_Nmap});

        chb_liveTel.setText("LiveTel");

        pass_sudo.setBorder(javax.swing.BorderFactory.createTitledBorder("sudo"));
        pass_sudo.setEnabled(false);
        pass_sudo.setPreferredSize(new java.awt.Dimension(100, 31));

        javax.swing.GroupLayout jP_DBEntryLayout = new javax.swing.GroupLayout(jP_DBEntry);
        jP_DBEntry.setLayout(jP_DBEntryLayout);
        jP_DBEntryLayout.setHorizontalGroup(
            jP_DBEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBEntryLayout.createSequentialGroup()
                .addComponent(jSP_nmap, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
            .addGroup(jP_DBEntryLayout.createSequentialGroup()
                .addGroup(jP_DBEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_DBEntryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jP_DBcontrol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jP_DBEntryLayout.createSequentialGroup()
                        .addComponent(jSP_telout)
                        .addGap(18, 18, 18)
                        .addGroup(jP_DBEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chb_liveTel)
                            .addComponent(pass_sudo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lb_infoStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jP_DBEntryLayout.setVerticalGroup(
            jP_DBEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_DBEntryLayout.createSequentialGroup()
                .addGroup(jP_DBEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jP_DBEntryLayout.createSequentialGroup()
                        .addComponent(chb_liveTel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pass_sudo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_infoStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSP_telout, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSP_nmap, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_DBcontrol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTP_Main.addTab("Info", jP_DBEntry);

        getContentPane().add(jTP_Main, java.awt.BorderLayout.CENTER);
        jTP_Main.getAccessibleContext().setAccessibleName("Main");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExpFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpFileActionPerformed

        class FileExpWorker extends SwingWorker<Void, Void> {

            @Override
            protected Void doInBackground() throws Exception {
                JFileChooser fileChooser = new JFileChooser();
                if (fileChooser.showSaveDialog(jP_Main) == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();

                    Iterator it = ipList.iterator();
                    BufferedWriter out = null;
                    try {
                        out = new BufferedWriter(new FileWriter(file, false));
                        while (it.hasNext()) {
                            out.write(it.next() + "\n");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(RIPT.class.getName()).log(Level.INFO, null, ex);
                    } finally {
                        try {
                            out.close();

                        } catch (IOException ex) {
                            Logger.getLogger(RIPT.class.getName()).log(Level.INFO, null, ex);
                        }
                    }
                    txtSys.append(file.getAbsolutePath() + "\n");
                    //ipList.clear();
                }
                return null;
            }
        }
        fileExpW = new FileExpWorker();
        fileExpW.execute();
    }//GEN-LAST:event_btnExpFileActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (isConn2DB()) {
            closeDB();
        }
        dispose();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed

        /*
         chRes(getNsucc(), getTries());
         DecimalFormat chper = new DecimalFormat("0.000");
         txtSys.append("** STOPPED\nNo. of IPs found: " + getNsucc() + "\nOver " + getTries() + "\n" /*
         * chper.format(getCh()) + "%
         );
         */

        //jChk_DB.setSelected(false);
        btnExit.setEnabled(true);
        cancelWorker(worker);
        cancelWorker(cmdNwork);
        cancelWorker(cmdTwork);
        //destroy all instances of sworkers
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO fix statistics !!  
        jChk_DB.setEnabled(false);
        btnStart.setEnabled(false);
        btnStop.setEnabled(true);
        //btnExit.setEnabled(false);
        txtIPs.setText(null);
        stateDBbuttons(false);


        class Worker extends SwingWorker<Void, String> {
            // RIPT rand;

            @Override
            protected Void doInBackground() throws Exception {

                txtSys.setText("* " + worker.getState().toString() + " @ " + getDateTime() + "\n");
                checkPrvMode();
                //cb_DBIPs.addItem("192.168.1.254");
                connDB();
                int ttl, th = 0;

                do {
                    ++th;
                    rand = new RIPT("Thread " + th);
                    rand.setClsRng(setIPRng());
                    ttl = jS_TTL.getValue() * 1000;
                    rand.setTTL(ttl);
                    rand.start();
                    try {
                        RIPT.sleep(ttl);
                        publish((String) rand.getIP());
                        //*** move to process
                        if (rand.getConStatus()) {
                            setNsucc(getNsucc() + 1);
                            ipList.add(rand.getIP());
                            //cbSucIP.addItem(rand.getIP());
                            cb_DBIPs.addItem(rand.getIP());
                            txtSys.append("Telnet to: " + rand.getIP() + " *SUCCESS*\n");
                            if (isConn2DB()) {
                                db.insMain(rand.getIP(), setIPRng());
                            }
                        }
                    } catch (InterruptedException e) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, e);
                        break;
                    }
                    if (cb_DBIPs.getItemCount() > 0) {
                        stateDBbuttons(true);
                        btnExpFile.setEnabled(true);
                    }
                } while (!isCancelled());
                rand.interrupt();
                return null;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String tmpres : chunks) {
                    txtIPs.append(tmpres + "\n");
                    setTries(getTries() + 1);
                }
            }

            @Override
            protected void done() {
                txtSys.append("* " + worker.getState().toString() + " @ " + getDateTime() + "\n");
                txtSys.setCaretPosition(txtSys.getText().length());
                btnStart.setEnabled(true);
                btnStop.setEnabled(false);
                //btnExit.setEnabled(true);
                jChk_DB.setEnabled(true);
                SWMExecutor.getInstance().terminate();
                try {
                    worker.get(jS_TTL.getValue(), TimeUnit.SECONDS);
                } catch (InterruptedException | ExecutionException | TimeoutException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        worker = new Worker();
        //ExecutorService workerThreadPool = Executors.newFixedThreadPool(1);
        //workerThreadPool.execute(worker);
        SWMExecutor.getInstance().execute(worker);

    }//GEN-LAST:event_btnStartActionPerformed

    private void jB_DBSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DBSubmitActionPerformed
        if (isConn2DB()) {
            try {
                if (!jTxt_telOut.getText().isEmpty() && !jTxt_nmap.getText().isEmpty()) {
                    db.insOutp(jTxt_telOut.getText(), cb_DBIPs.getSelectedItem().toString());
                    db.insNmap(jTxt_nmap.getText(), cb_DBIPs.getSelectedItem().toString());
                } else if (!jTxt_telOut.getText().isEmpty() && jTxt_nmap.getText().isEmpty()) {
                    db.insOutp(jTxt_telOut.getText(), cb_DBIPs.getSelectedItem().toString());

                } else if (!jTxt_nmap.getText().isEmpty() && jTxt_telOut.getText().isEmpty()) {
                    db.insNmap(jTxt_nmap.getText(), cb_DBIPs.getSelectedItem().toString());
                }
                if (!jTF_User.getText().isEmpty() || !jTF_Pass.getText().isEmpty()) {
                    db.insCreds(jTF_User.getText(), jTF_Pass.getText(), cb_DBIPs.getSelectedItem().toString());
                }
                clearDBFields();
                JOptionPane.showMessageDialog(jP_DBcon, "DB updated");
            } catch (Exception x) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, x);
            }
        } else {
            JOptionPane.showMessageDialog(jP_DBcon, "No DB connection !");
        }
    }//GEN-LAST:event_jB_DBSubmitActionPerformed
   
    private void prepareNmapCmd() {

        /*String nmScriptPath = "/home/zet/projects/NetBeansProjects/RTL/resources/scripts/zetnm.sh";
         String tmpIp = "192.168.1.254";*/

        String nmScriptPath = getJarPath() + "/scripts/zetnm.sh";
        String tmpIp = cb_DBIPs.getSelectedItem().toString();
        String pwd = pass_sudo.getText();

        if (isPrvMode()) {
            String[] nMapCmd = {nmScriptPath, tmpIp, "1"};
            execNmapCmd(nMapCmd);
        } else if ((!isPrvMode()) && ("".toString().equals(pass_sudo.getText()))) { //***** Original
            String[] nMapCmd = {nmScriptPath, tmpIp, "-1"};
            execNmapCmd(nMapCmd);
        } else if ((!isPrvMode()) && !("".toString().equals(pass_sudo.getText()))) {
            String[] nMapCmd = {nmScriptPath, tmpIp, "0", pwd}; 
            execNmapCmd(nMapCmd);
        }
    }

    private void execNmapCmd(String[] nMapCmd) {
        try {
            String displ_str;

            //Process proc = Runtime.getRuntime().exec(nMapCmd);
            ProcessBuilder pb = new ProcessBuilder(nMapCmd);
            Process proc = pb.redirectError(ProcessBuilder.Redirect.PIPE).redirectOutput(ProcessBuilder.Redirect.PIPE).start();

            BufferedReader stdIn = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            BufferedReader stdEr = new BufferedReader(new InputStreamReader(proc.getErrorStream()));

            while ((displ_str = stdIn.readLine()) != null) {
                jTxt_nmap.append(displ_str + "\n");
                stateDBbuttons(false);
            }
            while ((displ_str = stdEr.readLine()) != null) {
                txtSys.append("*** nMap returned Error: " + displ_str + "\n");
            }
            int exitValue = proc.waitFor();
            txtSys.append("* Nmap exit Value: "+ exitValue);
        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jB_NmapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_NmapActionPerformed
        class CMDNWorker extends SwingWorker<Void, Void> {

            @Override
            protected Void doInBackground() throws Exception {

                prepareNmapCmd();

                cancelWorker(cmdNwork);
                stateDBbuttons(true);

                return null;
            }
        }
        jTxt_nmap.setText("");
        cmdNwork = new CMDNWorker();
        SWNExecutor.getInstance().execute(cmdNwork);
    }//GEN-LAST:event_jB_NmapActionPerformed

    private void btn_TelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TelActionPerformed
        class CMDTWorker extends SwingWorker<Void, Void> {

            @Override
            protected Void doInBackground() throws Exception {

                String displ_str;
                int exitValue;

                String telScriptPath = getJarPath() + "/scripts/zettel.sh";
                String tmpIp = cb_DBIPs.getSelectedItem().toString();

                //String telScriptPath = "/home/zet/proj/NetBeansProjects/RTL/resources/scripts/zettel.sh";
                //String tmpIp = "192.168.1.254";

                if (chb_liveTel.isSelected()) {
                    String[] execTelStr = {"gnome-terminal",
                        "-x",
                        "telnet",
                        tmpIp
                    };
                    //Process procLive = Runtime.getRuntime().exec(execTelStr);
                    ProcessBuilder pb = new ProcessBuilder(execTelStr);
                    Process procLive = pb.start();
                    //exitValue = procLive.waitFor();
                    cancelWorker(cmdTwork);
                    stateDBbuttons(true);
                    return null;

                } else {

                    String[] execTelScriptStr = {telScriptPath, tmpIp};
                    ProcessBuilder pb = new ProcessBuilder(execTelScriptStr);
                    Process procApp = pb.redirectError(ProcessBuilder.Redirect.PIPE).redirectOutput(ProcessBuilder.Redirect.PIPE).start();

                    BufferedReader stdIn = new BufferedReader(new InputStreamReader(procApp.getInputStream()));
                    BufferedReader stdEr = new BufferedReader(new InputStreamReader(procApp.getErrorStream()));

                    while ((displ_str = stdIn.readLine()) != null) {
                        jTxt_telOut.append(displ_str + "\n");
                    }
                    while ((displ_str = stdEr.readLine()) != null) {
                        txtSys.append("*** TelNet [" + tmpIp + "] Error: " + displ_str + "\n");
                    }

                    exitValue = procApp.waitFor();
                    txtSys.append("** TelNet [" + tmpIp + "] exit Value is " + exitValue + "\n");

                    //******** Add 60 seconds timeout then close proc

                    cancelWorker(cmdTwork);
                    stateDBbuttons(true);
                    return null;
                }
            }
        }
        jTxt_telOut.setText("");
        cmdTwork = new CMDTWorker();
        cmdTwork.execute();
    }//GEN-LAST:event_btn_TelActionPerformed

    private void cb_DBIPsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_DBIPsActionPerformed
        clearDBFields();
    }//GEN-LAST:event_cb_DBIPsActionPerformed

    /**
     * *****************************HELPER METHODS START********************************************
     */
    private void checkPrvMode() {
        String uname = System.getProperty("user.name");
        if (uname.equalsIgnoreCase("root")) {
            setPrvMode(true);

            txtSys.append("** Running in Privileged mode\n");
        } else {
            setPrvMode(false);
            pass_sudo.setEnabled(true);
            txtSys.append("** Running in Unprivileged mode\n");
        }
    }

    private String getDateTime() {
        Date dtimestamp = new Date();
        SimpleDateFormat dtFrm = new SimpleDateFormat("E dd.MM.yyyy 'at' hh:mm:ss a");

        return dtFrm.format(dtimestamp);
    }

    private String getJarPath() {
        CodeSource codeSource = GUI.class.getProtectionDomain().getCodeSource();
        File jarFile = null;
        try {
            jarFile = new File(codeSource.getLocation().toURI().getPath());
        } catch (URISyntaxException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String jarDir = jarFile.getParentFile().getPath();
        return jarDir;
    }

    private void stateDBbuttons(boolean x) {
        jB_DBSubmit.setEnabled(x);
        jB_Nmap.setEnabled(x);
        btn_Tel.setEnabled(x);
    }

    private void clearDBFields() {
        jTxt_telOut.setText(null);
        jTxt_nmap.setText(null);
        jTF_User.setText(null);
        jTF_Pass.setText(null);
    }

    private void cancelWorker(SwingWorker w) {
        if (!w.isCancelled()) {
            w.cancel(true);
        }
    }

    private void closeDB() {
        db.closeDBconn();
        setConn2DB(false);
        jChk_DB.setSelected(false);
    }

    private void connDB() {
        if (jChk_DB.isSelected()) {
            if (isConn2DB()) {
                txtSys.append("** Already connected to DB\n");
            } else {
                int result = JOptionPane.showConfirmDialog(null, jP_DBcon,
                        "Please Enter DB Connection Values", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    db = new DB_conn(fullDBURL(txt_url.getText()), txt_db.getText(), txt_usr.getText(), String.valueOf(txt_pass.getPassword()));
                    setConn2DB(db.isFlgConn());
                    if (isConn2DB()) {
                        txtSys.append("** Connected to DB\n");
                    } else {
                        txtSys.append("** No DB connection\n");
                        jChk_DB.setSelected(false);
                    }
                }
            }
        } else {
            if (isConn2DB()) {
                closeDB();
                txtSys.append("** DB connection terminated\n");
            } else {
                txtSys.append("** No DB connection\n");
            }
        }
    }

    private String setIPRng() {
        if (rdbA.isSelected()) {
            return "A";
        } else if (rdbB.isSelected()) {
            return "B";
        } else if (rdbC.isSelected()) {
            return "C";
        } else {
            return "X";
        }
    }

    public void chRes(int succ, int tries) {
        setCh((succ / tries) * 100);
    }

    private String fullDBURL(String tmp) {
        String full = "jdbc:mysql://" + tmp + ":3306/";
        return full;
    }

    /**
     * ******************************HELPER METHODS END*****************************************
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    /**
     * ****USER DEFINED VARIABLES*******
     */
    private RIPT rand;
    private DB_conn db;
    private SwingWorker worker, cmdTwork, cmdNwork, fileExpW;
    private ArrayList ipList = new ArrayList();
    private int tries, nsucc;
    private float ch;
    private boolean conn2DB = false, prvMode = false;
    private String[] nMapCmd = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExpFile;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btn_Tel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cb_DBIPs;
    private javax.swing.JCheckBox chb_liveTel;
    private javax.swing.JButton jB_DBSubmit;
    private javax.swing.JButton jB_Nmap;
    private javax.swing.JCheckBox jChk_DB;
    private javax.swing.JDialog jD_DBcon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jP_DBEntry;
    private javax.swing.JPanel jP_DBcon;
    private javax.swing.JPanel jP_DBcontrol;
    private javax.swing.JPanel jP_Main;
    private javax.swing.JScrollPane jSP_iptxt;
    private javax.swing.JScrollPane jSP_nmap;
    private javax.swing.JScrollPane jSP_sstxt;
    private javax.swing.JScrollPane jSP_telout;
    private javax.swing.JSlider jS_TTL;
    private javax.swing.JTextField jTF_Pass;
    private javax.swing.JTextField jTF_User;
    private javax.swing.JTabbedPane jTP_Main;
    private javax.swing.JTextArea jTxt_nmap;
    private javax.swing.JTextArea jTxt_telOut;
    private javax.swing.JLabel lb_infoStatus;
    private java.awt.Panel pan_Main;
    private javax.swing.JPanel pan_control;
    private javax.swing.JPasswordField pass_sudo;
    private javax.swing.JRadioButton rdbA;
    private javax.swing.JRadioButton rdbB;
    private javax.swing.JRadioButton rdbC;
    private javax.swing.JRadioButton rdbFR;
    private javax.swing.JTextArea txtIPs;
    private javax.swing.JTextArea txtSys;
    private javax.swing.JTextField txt_db;
    private javax.swing.JPasswordField txt_pass;
    private javax.swing.JTextField txt_url;
    private javax.swing.JTextField txt_usr;
    // End of variables declaration//GEN-END:variables

    /**
     * *******************GET/SET FUNCTIONS*****************
     */
    /**
     * @return the tries
     */
    public int getTries() {
        return tries;
    }

    /**
     * @param tries the tries to set
     */
    public void setTries(int tries) {
        this.tries = tries;
    }

    /**
     * @return the nsucc
     */
    public int getNsucc() {
        return nsucc;
    }

    /**
     * @param nsucc the nsucc to set
     */
    public void setNsucc(int nsucc) {
        this.nsucc = nsucc;
    }

    /**
     * @return the ch
     */
    public float getCh() {
        return ch;
    }

    /**
     * @param ch the ch to set
     */
    public void setCh(float ch) {
        this.ch = ch;
    }

    /**
     * @return the prvMode
     */
    public boolean isPrvMode() {
        return prvMode;
    }

    /**
     * @param prvMode the prvMode to set
     */
    public void setPrvMode(boolean prvMode) {
        this.prvMode = prvMode;
    }

    /**
     * @return the nMapCmd
     */
    public String[] getnMapCmd() {
        return nMapCmd;
    }

    /**
     * @param nMapCmd the nMapCmd to set
     */
    public void setnMapCmd(String[] nMapCmd) {
        this.nMapCmd = nMapCmd;
    }

    /**
     * @return the conn2DB
     */
    public boolean isConn2DB() {
        return this.conn2DB;
    }

    /**
     * @param conn2DB the conn2DB to set
     */
    public void setConn2DB(boolean conn2DB) {
        this.conn2DB = conn2DB;
    }
}
